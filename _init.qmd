```{r settings}
#| include: false
library(glue)
library(ggplot2)
library(scales)
library(tidyr)
library(dplyr)
library(jsonlite)
library(readr)
library(stringr)
library(rmarkdown)
library(DT)
library(lubridate)
library(leaflet)

theme_set(theme_classic(base_size = 12))
colorBlindBlack8 <- c(
    "#464343", "#E69F00", "#56B4E9", "#009E73",
    "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
    "#750a0f", "#669c8e"
)
options(ggplot2.discrete.colour = colorBlindBlack8)
options(ggplot2.discrete.fill = colorBlindBlack8)

```

```{r loadData}
#| include: false
#| cache: true

# RedList
checkList <- read_csv("data/data_species_check_list.csv", show_col_types = FALSE) |>
    rename(scientific_name = speciesname) |>
    distinct(scientific_name, .keep_all = TRUE) |>
    filter((annex_II_priority != "N" | annex_II != "N" | annex_IV != "N")) 
# Birds RedList
birdsList <- read_csv2("data/birds.csv", show_col_types = FALSE, col_types = cols(.default = "c")) |>
    rename_with(~"scientific_name", 1) |>
    select(scientific_name, `Annex I`) |>
    rename(AnnexI = `Annex I`) |>
    drop_na(AnnexI)
# German Common Names
taxasDE <- read_csv('data/VernacularNames-german.csv', show_col_types = FALSE, col_types = cols(.default = "c")) |> 
    group_by(id) |> 
    summarise(
      vernacularName =  paste(vernacularName, collapse = ', ') |>
                        stringr::str_trunc(35)
    )
# Full Taxon Tree Names
taxas <- read_csv('data/taxa.csv', show_col_types = FALSE, col_types = cols(.default = "c")) |> 
    left_join(taxasDE, by = "id") |> 
    select(id, scientificName, vernacularName, taxonRank, kingdom:infraspecificEpithet)

rm(taxasDE)
```

```{r loadFunctions}
#| include: false
loadObs <- function(projectId, maxLoops = 200){
   tryCatch(
     exp = {
      checkIfFileExists <- file.exists(glue("data/obs_{projectId}.csv"))
      if(checkIfFileExists){
        print("File exists, loading from file")
        obsResults <- read_csv(glue("data/obs_{projectId}.csv"), show_col_types = FALSE, col_types = cols(.default = "c"))
        return(obsResults)
      }
      apiEndpoint <- "https://api.inaturalist.org/v2/observations"
      fields <- "(id:!t,uri:!t,quality_grade:!t,num_identification_disagreements:!t,time_observed_at:!t,location:!t,user:(name:!t,id:!t,login:!t),taxon:(id:!t))"
      perPage <- 200
      staticQuery <- glue("project_id={projectId}&order=asc&order_by=id&per_page={perPage}&fields={fields}")
      
      aboveId <- 1
      obsList <- list()
      loopCounter <- 1
      while (aboveId > 0) {
        Sys.sleep(1)
        
        obsUrl <- glue("{apiEndpoint}?{staticQuery}&id_above={aboveId}")
        print(obsUrl)
        obsFetch <- jsonlite::fromJSON(obsUrl)
        totalResults <- obsFetch$total_results
        if(totalResults == 0){
          print("Empty results")
          break;
        }
        
        obsTempResults <- obsFetch$results |> unnest(c(taxon, user), names_sep = ".")
        aboveId = max(obsTempResults$id)
        obsList[[loopCounter]] <- obsTempResults |>
          mutate(across(everything(), as.character))
        
        if(totalResults <= perPage){
          print("No more fetches needed")
          break;
        }
        
        print("Remaining Obs")
        print(totalResults - perPage)
        print("Loops to finish")
        print((totalResults - perPage) / perPage)
        print("Loops done")
        print(loopCounter)
        
        if(loopCounter >= maxLoops){
          print("Breaking early because max loop limit")
          break;
        }
        
        loopCounter <- loopCounter + 1
        
      }
      if(length(obsList) == 0){
        print("No results")
        return(NULL)
      }
      obsResults <- bind_rows(obsList) |>
        left_join(taxas, by = c("taxon.id" = "id"))|> 
        mutate(
          user.name = ifelse(is.na(user.name) | user.name == '', user.login, user.name),
          project.id = projectId,
          project.name = names(projectId),
          uri_html = glue("<a href='{uri}'>{id}</a>"),
        ) |>
        distinct(uuid, .keep_all = TRUE) # catch any possible double entries due to our loop logic
      return(obsResults)
     },
    error = function(e){
      message('Caught an error!')
      print(e)
      return(NULL)
    },
    warning = function(w){
      message('Caught an warning!')
      print(w)
      return(NULL)
    },
    finally = {
      message('All done, quitting.')
    }
  )
}
```
