
```{r statsDistinct}
if(!is.null(obsResults)){
  distinctObserver <- obsResults$user.id %>% unique()
  distinctSpecies <- obsResults %>% 
    filter(taxonRank == 'species' | taxonRank == 'subspecies') %>%
    pull(scientificName) %>%
    unique(.)

  statsObserver <- obsResults %>% 
    count(user.id) %>%
    summarise(
        mean = round(mean(n), 1),
        median = median(n),
    )

} else {
  distinctObserver <- c()
  distinctSpecies <- c()
  statsObserver <- tibble(mean = c(0), median = c(0))
}

```

## Allgemeine Information

Insgesamt wurden `r nrow(obsResults)` Beobachtungen von `r length(distinctObserver)` Beobachterinnen und Beobachtern hochgeladen. Das ergibt einen Mittelwert von `r statsObserver$mean[1]` Beobachtungen pro Beobachter bzw. Beobachterin und einen Median von `r statsObserver$median[1]`. Auf Spezies-Ebene wurden `r length(distinctSpecies)` Beobachtungen hochgeladen.

### Top 10 Beobachter/innen

In dieser Liste werden auch doppelte Beobachtungen gezählt, jedoch sollte dies nicht als Tipp betrachtet werden, um an erster Stelle zu stehen.

```{r tableTopObserver}
if(!is.null(obsResults)){
  obsResults %>% 
    count(user.id, user.name) %>% 
    slice_max(n = 10, order_by = n) %>%
    select('Beob. [#]' = n, 'User' = user.name)
} else {
  print('Noch keine Beobachtungen')
}
```
### Top 10 Taxa (Spezies-Ebene)

In dieser Liste sind die am häufigsten beobachteten Taxa auf Spezies-Ebene aufgeführt, die bereits identifiziert wurden. Es ist jedoch nicht erforderlich, dass diese von einer zweiten Person bestätigt wurden, um den Forschungsstandard (Research-Grade) zu erreichen.

```{r tableTopTaxa}
if(!is.null(obsResults)){
  obsResults %>% 
    filter(taxonRank == 'species' | taxonRank == 'subspecies') %>%
    count(scientificName, vernacularName) %>% 
    slice_max(n = 10, order_by = n) %>%
    select('Beob. [#]' = n, 'Wiss. Name' = scientificName, 'Umgangspr. Name' = vernacularName)
} else {
  print('Noch keine Beobachtungen')
}
```

### Unique Taxa mit Research-Grade

Besonders erfreulich sind natürlich immer einzigartige Funde, die nur von einer Person in der Challenge hochgeladen wurden. In dieser Liste müssen jedoch alle Spezies von einer zweiten Person bestätigt werden, um den Forschungsstandard (Research-Grade) zu erreichen.

```{r tableUniqueTaxa}
if(!is.null(obsResults)){
  obsResults %>% 
    filter((taxonRank == 'species' | taxonRank == 'subspecies') & quality_grade == 'research') %>%
    add_count(scientificName, vernacularName) %>% 
    filter(n == 1) %>% 
    select('Wiss. Name' = scientificName, 'Umgangspr. Name' = vernacularName,  'User' = user.name)
} else {
  print('Noch keine Beobachtungen')
}
```

### Beobachtungs Qualität

iNaturalist unterteilt die Beobachtungsqualität in drei Kategorien. Die Kategorie "causal" umfasst Beobachtungen, bei denen mindestens eines der folgenden Elemente fehlt: das Datum der Beobachtung, der Beobachtungsort oder ein Foto (oder Tonaufnahme). Die Kategorie "needs_id" wird angezeigt, bis mindestens zwei Personen eine Spezies für diesen Upload einstimmig bestimmt haben, ohne Widerspruch. Die letzte und wertvollste Kategorie ist "research", die bestätigte Beobachtungen auf Spezies-Ebene umfasst.

```{r plotQuality}
if(!is.null(obsResults)){
  obsResults %>% 
    count(quality_grade) %>% 
    arrange(desc(n)) %>%
    mutate(
      np = n / nrow(obsResults),
      quality_grade = forcats::fct_reorder(quality_grade, np, .desc = TRUE)
    ) %>% 
    ggplot() +
      aes(x = quality_grade, y = np, fill = quality_grade) +
      geom_bar(position = 'dodge', stat='identity', show.legend = FALSE) +
      geom_text(aes(label=paste("n =", n)), position=position_dodge(width=0.9), hjust=-0.25) +
      labs(
        y = "Beobachtungen Qualität [%]",
        x = ""
      ) +
      scale_y_continuous(
        labels = scales::percent_format(),
        limits = c(0, 1)
      ) +
      coord_flip(clip="off") +
      theme(
        panel.grid.major.x = element_line()
      )
} else {
  print('Noch keine Beobachtungen')
}
```

### Beobachtungen Phylum

```{r plotPhylum}
if(!is.null(obsResults)){
  obsResults %>% 
    count(phylum) %>% 
    drop_na(phylum) %>% 
    arrange(desc(n)) %>%
    mutate(
      np = n / nrow(obsResults),
      phylum = forcats::fct_reorder(phylum, np, .desc = TRUE)
    ) %>% 
    ggplot() +
      aes(x = phylum, y = np, fill = phylum) +
      geom_bar(position = 'dodge', stat='identity', show.legend = FALSE) +
      geom_text(aes(label=paste("n =", n)), position=position_dodge(width=0.9), hjust=-0.25) +
      labs(
        y = "Beobachtungen Phyla [%]",
        x = ""
      ) +
      scale_y_continuous(
        labels = scales::percent_format(),
        limits = c(0, 1)
      ) +
      coord_flip(clip="off") +
      theme(
        panel.grid.major.x = element_line()
      )
} else {
  print('Noch keine Beobachtungen')
}
```

### Insecta - Ordnungen

```{r plotInsecta}
if(!is.null(obsResults)){
  obsInsecta <- obsResults %>% 
    filter(class == "Insecta") %>%
    drop_na(order)

  obsInsecta %>%
    count(order) %>%
    mutate(
        p = n / nrow(obsInsecta),
        order = forcats::fct_reorder(order, p, .desc = TRUE)
    ) %>%
    ggplot(aes(y = order, x = p, label = n)) +
    geom_col() +
    geom_text(nudge_x = 0.01, check_overlap = TRUE) +
    scale_x_continuous(
        breaks = scales::pretty_breaks(),
        labels = scales::label_percent()
    ) +
    labs(
        y = "Insecta - Ordnung",
        x = glue("Beobachtungen (# = {nrow(obsInsecta)}) [%]")
    ) +
    theme(
        panel.grid.major.x = element_line()
    )
} else {
  print('Noch keine Beobachtungen')
}
``` 

### Beobachtungen mit Konflikt Bestimmungen

```{r tableConflict}
if(!is.null(obsResults)){
  obsResults %>% 
    filter(num_identification_disagreements > 0) %>% 
    select(uri, "User" = user.name, "Taxa" = scientificName)
} else {
  print('Noch keine Beobachtungen')
}
```

### Rote Liste

Anmerkung: Beinhaltet die Rote Liste aller EU Länder.

```{r tableCheckList}
if(!is.null(obsResults)){
  checkList %>% 
    right_join(obsResults, by = c("scientific_name" = "scientificName")) %>%
    drop_na(annex_II) %>%
    add_count(scientific_name) %>% 
    count(scientific_name, vernacularName, annex_II_priority, annex_II, annex_IV) %>% 
    arrange(scientific_name) %>% 
    select("Wiss. Name" = scientific_name, "Umgangspr. Name" = vernacularName, annex_II_priority, annex_II, annex_IV, n)
} else {
  print('Noch keine Beobachtungen')
}
```
```{r tableBirdsList}
if(!is.null(obsResults)){
  birdsList %>% 
    right_join(obsResults, by = c("scientific_name" = "scientificName")) %>%
    drop_na(AnnexI) %>%
    arrange(scientific_name) %>% 
    count(scientific_name, vernacularName, AnnexI) %>% 
    select("Wiss. Name" = scientific_name, "Umgangspr. Name" = vernacularName, AnnexI, n)
} else {
  print('Noch keine Beobachtungen')
}
```

